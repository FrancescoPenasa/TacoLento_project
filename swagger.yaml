swagger: '2.0'
info:
  version: '1.0'
  title: "TacoLento"
  description: TacoLento is an API that allows it's users to create and manage exams and tasks.
basePath: /
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /users:
    get:
      tags:
      - "users"
      #summary: Get all users
      description: "Get all users"
      produces:
      - "application/json"
      
      responses:
       200: 
         description: OK
       404:
         description: Users not found
      
    post:
      tags:
      - "users"
      #summary: Create user
      description: "Create user"
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: User created
        400: 
          description: Invalid input
        409: 
          description: An user with this email was already found.
      
  /users/{userId}:
    #x-summary: Update, search or delete a user
    get:
      description: Find user info
      tags:
        - "users"
      parameters:
         - name: userId
           in: path
           description: exam ID
           required: true
           type: integer
      responses:
       302: 
         description: User found
       400: 
         description: Invalid input
       404:
         description: User not found
    put:
      description: Update user info
      parameters:
         - name: userId
           in: path
           description: exam ID
           required: true
           type: integer
      responses:
       202: 
         description: User updated
       400: 
         description: Invalid input
       404: 
         description: User not found
    delete:
      description: delete user
      parameters:
         - name: userId
           in: path
           description: exam ID
           required: true
           type: integer
      responses:
       202: 
         description: User deleted
       404: 
         description: User not found
  
  /tasks:
    #x-summary: Tasks Collection
    get:
      description: List All Tasks
#      parameters:
#          in: query
#          name: MC
#          schema:
#            type: string
#            enum: [MC,CC, OpenAnswer]
#          required: false
      responses:
        200:
          description: Successful response
        400: 
          description: Invalid input
          
    post:
      description: Create Task
      responses:
        201:
          description: Task created 
        400:
          description: Invalid input
         
  /tasks/findBySubject:
    get:
      tags:
      - "tasks"
      #summary: "Finds Task by subject"
      description: "Finds Task by subject. Multiple status values can be provided with comma separated strings"
      operationId: "findTasksBySubject"
      produces:
      - "application/json"
      parameters:
      - name: "subject"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Task"
        400:
          description: "Invalid status value"
          
  /tasks/{taskId}:
    #x-summary: Update, search or delete a task
    get:
      description: Find task
      parameters:
        - name: taskId
          in: path
          description: exam ID
          required: true
          type: integer
      responses:
        201: 
          description: Task found
        400: 
          description: Invalid input
        404:
          description: Task not found
    put:
      description: Update task
      parameters:
        - name: taskId
          in: path
          description: exam ID
          required: true
          type: integer
      responses:
        201: 
          description: Task updated
        400: 
          description: Invalid input
        404:
          description: Task not found
    delete:
      description: Delete task
      parameters:
        - name: taskId
          in: path
          description: exam ID
          required: true
          type: integer
      responses:
        201: 
          description: Task deleted
        404:
          description: Task not found
    
          
  /exams:
    #x-summary: Exams Collection
    get:
      tags: 
      - "exams"
      #summary: List All Exams
      description: "List All Exams"
      responses:
        200:
          description: Successful response
        400: 
          description: Invalid input
    
    post:
      description: Create exam
      #summary: Create a New Exam
      responses:
        201:
          description: Exams created
        400:
          description: Invalid input

  /exams/{examId}:
    #x-summary: Update, search or delete exam 
    get:
      tags: 
      - "exams"
      description: Find exam
      parameters:
        - name: examId
          in: path
          description: exam ID
          required: true
          type: integer
      responses:
        201: 
          description: Exam find
        400: 
          description: Invalid input
        404: 
          description: Exam doesn't exist.
    put:
      description: Update Exam
      parameters:
        - name: examId
          in: path
          description: exam ID
          required: true
          type: integer
      responses:
         201: 
           description: Exam updated
         400: 
           description: Invalid input
         404: 
          description: Exam doesn't exist.
    delete:
      description: Delete Exam
      parameters:
        - name: examId
          in: path
          description: exam ID
          required: true
          type: integer
      responses:
        201: 
          description: Exam deleted
        400: 
          description: Invalid input
        404: 
          description: Exam doesn't exist.
          
  /submissions/:
    #x-summary: sub 
    get:
      tags:
      - "submissions"
      #summary: Get all submissions
      description: "Get all submissions"
      produces:
      - "application/json"
      
      responses:
       200: 
         description: OK
       404:
         description: Submissions not found
      
    post:
      tags:
      - "submission"
      #summary: Create submission
      description: "Create submission"
      operationId: "addSubmission"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created submission object"
        required: true
        schema:
          $ref: "#/definitions/Submission"
      responses:
        201:
          description: Submission created
        400: 
          description: Invalid input

  
  /submissions/findByExam:
    get:
      tags:
      - "submissions"
      #summary: "Finds Submission by Exam"
      description: "Finds Submission by Exam. Multiple status values can be provided with comma separated strings"
      operationId: "findSubmissionsByExam"
      produces:
      - "application/json"
      parameters:
      - name: "exam"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Submission"
        400:
          description: "Invalid status value"
    
  /submissions/{subId}:
  #  x-summary: Update, search or delete exam 
    get:
      description: Find Submission
      parameters:
        - name: subId
          in: path
          description: submission ID
          required: true
          type: integer
      responses:
        201: 
          description: Submission find
        400: 
          description: Invalid input
        404: 
          description: Submission not found.
          
    #questo potrebbe essere importante      
    put:
      description: Update Submission
      parameters:
        - name: subId
          in: path
          description: submission ID
          required: true
          type: integer
      responses:
         201: 
           description: Submission updated
         400: 
           description: Invalid input
         404: 
           description: Submission not found.
           
    delete:
      description: Delete Submission
      parameters:
        - name: subId
          in: path
          description: submission ID
          required: true
          type: integer
      responses:
        200: 
          description: Submission deleted
        400: 
          description: Invalid input
        404: 
          description: Submission doesn't exist.

  /reviews/:
  #  x-summary: Update, search or delete exam 
    get:
      tags:
      - "review"
      #summary: Get all reviews
      description: "Get all reviews"
      produces:
      - "application/json"
      
      responses:
       200: 
         description: OK
       404:
         description: Reviews not found
      
    post:
      tags:
      - "review"
      #summary: Create review
      description: "Create review"
      operationId: "addReview"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created review object"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        201:
          description: Review created
        400: 
          description: Invalid input
        
 
  #FORSE QUESTO NO
  /reviews/findByExam:
    get:
      tags:
      - "reviews"
      #summary: "Finds Reviews by Exam"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findReviewsByExam"
      produces:
      - "application/json"
      parameters:
      - name: "exam"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        400:
          description: "Invalid status value"
  
 
  /reviews/findBySubmission:
    get:
      tags:
      - "reviews"
      #summary: "Finds Reviews by Submission"
      description: "Finds Reviews by Submission. Multiple status values can be provided with comma separated strings"
      operationId: "findReviewsBySubmission"
      produces:
      - "application/json"
      parameters:
      - name: "Submission"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        400:
          description: "Invalid status value"
  
  /reviews/{reviewId}:
  #  x-summary: Update, search or delete exam 
    get:
      tags:
      - "reviews"
      description: Find review
      parameters:
        - name: reviewId
          in: path
          description: revied id
          required: true
          type: integer
      responses:
        200: 
          description: Review find
        400: 
          description: Invalid input
        404: 
          description: Review not found.

    put:
      description: Update review
      parameters:
        - name: reviewId
          in: path
          required: true
          type: integer
      responses:
         201: 
           description: Exam updated
         400: 
           description: Invalid input
         404: 
            description: Review not found.

definitions:
  User:
    type: "object"
    required:
      - id
      - name
      - surname
      - email
      - password
    properties:
      id:
        type: "integer"
        description: Unique user ID
      name:
        type: "string"
        description: User Name
      surname:
        type: "string"
        description: User surname
      email:
        type: "string"
        description: User email (for login)
      password:
        type: "string"
        description: User password (for login)
      
  Submission:
    type: "object"
    required: 
      - id
      - date
      - userId
      - examId
      - answers
    properties:
      id:
        type: "integer"
        description: Unique id submission
      date:
        type: "string"
        description: submission date and hour
      userId:
        type: "integer"
        format: "int64"
      examId:
        type: "integer"
        format: "int64"
      answers:
        type: "array"
        description: "all user answer" 
        items:
          type: "object"
          properties:
            idTask:
              type: "integer"
              description: Unique task ID 
            answer:
              type: "string"
              description: answer for a specific taskId
      
  Review:
    required: 
      - id
      - userId
      - submissionId
      - result
      - comments
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: Unique ID of this review 
      userId:
        type: "integer"
        format: "int64"
        description: Unique user ID 
      submissionId:
        type: "integer"
        format: "int64"
        description: Unique submission ID
      result: 
        type: boolean
        description: Exam result  
      comments:
        type: "array"
        items:
          type: "object"
          properties:
            idTask:
              type: "integer"
              format: "int64"
              description: Unique task ID
            comment:
              type: "string"
              description: comment to submitted task
      
  Task:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: Unique task ID
      taskType:
        type: "string"
        enum:
          - OP
          - MC
          - SC
        description: >
          - OP: Open question
          - MC: Multiple Choice 
          - SC: Single Choice 
      question:
        type: "string"
        description: the question of this task
      subjectId:
        type: "integer"
        format: "int64"
        
  Exams:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: Unique exam ID
      name: 
        type: string
        description: exam name
        example: SE2_2018
      date:
        type: "array"
        items:
          type: "integer"
          properties:
            day:
              type: "integer"
              format: "int64"
              description: start day
              minimum: 1
              maximum: 31
            month:
              type: "integer"
              format: "int64"
              description: start month
              minimum: 1
              maximum: 12
            year:
              type: "integer"
              format: "int64"
              description: start year
              minimum: 2018
      deadline:
        type: "array"
        items:
          type: "integer"
          properties:
            day:
              type: "integer"
              format: "int64"
              description: deadline day
              minimum: 1
              maximum: 31
            month:
              type: "integer"
              format: "int64"
              description: deadline month
              minimum: 1
              maximum: 12
            year:
              type: "integer"
              format: "int64"
              description: deadline year
              minimum: 2018
      Question_N: 
        type: integer
        description: number of question
        minimum: 1
        maximum: 20